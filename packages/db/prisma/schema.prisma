generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ADMIN_ROLE {
  SUPER
  ADMIN
  TRESASURAR
}

// Top-level admin model
model Admin {
  id               String             @id @default(uuid())
  email            String             @unique
  emailVerified    Boolean            @default(false)
  password         String
  fullname         String
  phone            String?            @unique
  phoneVerified    Boolean?           @default(false)
  role             ADMIN_ROLE
  // franchises
  address          Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

}


// User Model
model User {
  id             String      @id @default(uuid())

  fullname    String

  relationType  RelationType // Optional, as not everyone needs to specify a relation
  relationName  String

  dob           DateTime
  address       Json
  phone         String @unique
  email         String @unique
  emailVerified Boolean

  aadhaar       String
  aadhaarVerified Boolean

  gender      GenderType @default(None)
  userPhoto      String

  referralId    String @unique

  parentReferralId    String?
  directJoin    User[] @relation("UserDirectJoin")
  joinedBy      User?  @relation("UserDirectJoin", fields: [parentReferralId], references: [referralId])

  parentBId       String?
  parentCId       String?

  TnCAcceptance TnCAcceptance?

  healthCard    Boolean @default(false)

  nominieeName  String
  nominieeDob   DateTime
  relationship  String


  deleted        Boolean     @default(false)
  deactivated    Boolean     @default(false)

  onBoardingId   String   @unique
  onBoarding     Onboarding   @relation("UserOnboarding", fields: [onBoardingId], references: [id])

  orderId        String @unique
  order          Order  @relation("paymentOrder", fields: [orderId], references: [id])

  bankDetails   BankDetails?
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum GenderType {
  Male
  Female
  Others
  None
}

enum RelationType {
  So   @map("S/o")
  Do   @map("D/o")
  Wo   @map("W/o")
}

enum TCOptions {
  ACCEPTED
  REJECTED
}

model Onboarding {
  id             String      @id @default(uuid())
  fullname    String

  relationType  RelationType // Optional, as not everyone needs to specify a relation
  relationName  String

  dob           DateTime
  address       Json
  phone         String @unique
  phoneVerified Boolean
  email         String
  emailVerified Boolean
  aadhaar       String
  aadhaarVerified Boolean
  gender      GenderType @default(None)
  userPhoto      String

  nominieeName  String
  nominieeDob   DateTime
  relationship  String

  referralId    String? @unique

  TnCAcceptance TnCAcceptance?

  onBoardingFinished  Boolean @default(false)
  user        User?     @relation("UserOnboarding")
  orders          Order[] @relation("OnBoardingPaymentOrder")

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model BankDetails {
  id             String      @id @default(uuid())

  bankName       String
  accountNumber String
  ifscCode      String
  branch        String

  userId        String  @unique
  User          User  @relation(fields: [userId],references: [id],onDelete: Cascade)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model GmailVerificationCode {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PhoneVerificationCode {
  id        String   @id @default(uuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}


model Order {
  id             String      @id @default(cuid())
  paymentOrderId String   @unique
  paymentSessionId String  @unique
  status         OrderStatus @default(PENDING)
  totalAmount    Decimal     @default(3999)
  currency       String      @default("INR")
  notes          String?
  itemDetailsSnapshot Json?

  payments       Payment[]

  user           User?       @relation("paymentOrder")
  onBoardingId   String
  onBoarding     Onboarding  @relation("OnBoardingPaymentOrder", fields: [onBoardingId], references: [id])

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  PENDING
  SUCCESS
  FAILED
  FLAGGED
}

model Payment {
  id                  String       @id @default(cuid())
  paymentOrderId   String    @unique
  paymentSessionId    String    @unique 
  status              PaymentStatus @default(INITIATED)
  amount              Decimal
  currency            String       @default("INR")
  paymentMethod       String?
  gatewayResponse     Json?
  errorMessage        String?

  processedAt         DateTime?    

  orderId             String       
  order               Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}


model TnCVersion {
  id        String   @id @default(uuid())
  version   String   // e.g., "v1.0", "v2.1"
  content   String   // optional: store plain text or markdown
  TnCAcceptance TnCAcceptance[]
  createdAt DateTime @default(now())
}

model TnCAcceptance {
  id           String      @id @default(uuid())
  userId       String?     @unique
  user         User?       @relation(fields: [userId], references: [id])
  
  onboardingId String      @unique
  onboarding   Onboarding  @relation(fields: [onboardingId], references: [id])

  tncVersionId String
  tncVersion   TnCVersion  @relation(fields: [tncVersionId], references: [id])

  acceptedAt   DateTime    @default(now())
  createdAt    DateTime    @default(now())
}
